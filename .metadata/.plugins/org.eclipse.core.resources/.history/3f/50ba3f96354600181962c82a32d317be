package contacts;
import java.util.*;

public class Main
{
	private static ArrayList<Contact> alTest = new ArrayList<>();
	private static LinkedList<Contact> llTest = new LinkedList<>();
	private static HashMap<String, Contact> mapTest = new HashMap<>();
	
    public static void main(String[] args) {
    		manage();
    }
    
	private static void manage() {
		System.out.println("");
		System.out.println("***************************************************");
		System.out.println("new: New Contact");
		System.out.println("find: Find Contact");
		System.out.println("close: Close Password Manager");
		System.out.println("gen: Generate Contacts");
		System.out.println("Enter Your Choice: ");
		choiceHandler();
	}
	
	private static void choiceHandler() {
		Scanner reader = new Scanner(System.in);
		String choice = reader.next();
		switch (choice) {
		case "new": newContact(reader);
				manage();
			break;
		case "find": getContact(reader);
				manage();
			break;
		case "close": System.out.println("Bye!");
			break;
		case "gen": makeContacts(reader);
				manage();
			break;
		default: System.out.println("Not a valid Choice");
				manage();
			break;
		}
	}
	
	private static void newContact(Scanner reader) {
		System.out.println("Enter First Name");
		String fName = reader.next();
		System.out.println("Enter Last Name");
		String lName = reader.next();
		System.out.println("Enter Email");
		String email = reader.next();
		System.out.println("Enter PhoneNumber");
		String phoneNum = reader.next();
		Contact contact = new Contact(fName, lName, email, phoneNum);
		// Uncomment/Comment to time method
		long startTime = System.nanoTime();
//		AL.insert(alTest, contact);
//		LL.insert(llTest, contact);
		HashTable.insert(mapTest, contact);
		long endTime   = System.nanoTime();
		long totalTime = endTime - startTime;
		System.out.println(totalTime);
	}
	
	private static void getContact(Scanner reader) {
		System.out.println("Enter first name:");
		String first = reader.next();
		System.out.println("Enter last name:");
		String last = reader.next();
		String fullName = first+" "+last;
		// Uncomment/Comment to time method
		long startTime = System.nanoTime();
//		AL.search(alTest, fullName);
//		LL.search(llTest, fullName);
		HashTable.search(mapTest, fullName);
		long endTime   = System.nanoTime();
		long totalTime = endTime - startTime;
		System.out.println(totalTime);
	}
	
	private static void makeContacts(Scanner reader) {
		System.out.println("How many new contacts?");
		int num = reader.nextInt();
		Factory create = new Factory();
		for (int i = 0; i < num; i++) {
	        String fName = create.randName();
	        String lName = create.randName();
	        String email = create.randEmail(fName);
	        String phone = create.randPhone();
	        Contact contact = new Contact(fName, lName, email, phone);
	     // Uncomment/Comment to time method
	        long startTime = System.nanoTime();
//			AL.insert(alTest, contact);
//			LL.insert(llTest, contact);
			HashTable.insert(mapTest, contact);
			long endTime   = System.nanoTime();
			long totalTime = endTime - startTime;
			System.out.println(totalTime);
		}
	}
}